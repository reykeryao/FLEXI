%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Oct 11 12:21:02 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGGCUCUGAUGUGAGGGCUGGCACCACCUCUCCCUUGGCAGGCACUAAUUGCAGCCUUCCCACCAG\
) } def
/len { sequence length } bind def

/coor [
[43.69613647 326.99157715]
[36.32511520 340.54412842]
[22.78618813 347.94012451]
[7.39957428 346.81958008]
[-4.92491150 337.53997803]
[-10.25457096 323.06246948]
[-6.88872957 308.00677490]
[4.09858561 297.17706299]
[19.20136070 294.02908325]
[24.47198486 279.98556519]
[29.74260712 265.94204712]
[26.97071838 251.30763245]
[39.06368256 241.10612488]
[44.33430481 227.06260681]
[41.56241608 212.42819214]
[53.65538025 202.22668457]
[58.92600250 188.18316650]
[64.19662476 174.13963318]
[69.46724701 160.09611511]
[74.73786926 146.05259705]
[80.00849152 132.00906372]
[85.27911377 117.96554565]
[90.54973602 103.92202759]
[90.22578430 95.57974243]
[96.38475037 89.37554932]
[102.28012085 75.58263397]
[105.94522858 61.03728867]
[107.28981781 46.09767151]
[99.10724640 29.77351761]
[109.37899017 15.72034836]
[110.05196381 0.73545259]
[97.83672333 -8.83363533]
[93.61133575 -23.76433372]
[99.00054932 -38.31548309]
[111.93211365 -46.89186859]
[127.43356323 -46.19569778]
[139.54428101 -36.49466324]
[143.60745239 -21.51900482]
[138.06069946 -7.02717495]
[125.03685760 1.40842509]
[124.36389160 16.39332199]
[132.38040161 25.72323418]
[131.73637390 38.41303253]
[122.22943115 47.44226456]
[120.88484192 62.38187790]
[133.75988770 54.68556213]
[148.62443542 56.69681549]
[158.99127197 67.53787994]
[160.33609009 82.47747803]
[152.07196045 94.99562836]
[137.80555725 99.62915039]
[123.76303101 94.35585785]
[116.07304382 81.47800446]
[110.17766571 95.27091980]
[104.59326172 109.19264984]
[99.32263947 123.23616791]
[94.05201721 137.27969360]
[88.78139496 151.32321167]
[83.51077271 165.36674500]
[78.24015045 179.41026306]
[72.96952820 193.45378113]
[67.69890594 207.49731445]
[70.09380341 223.13619995]
[58.37782669 232.33322144]
[53.10720444 246.37675476]
[55.50210190 262.01565552]
[43.78612900 271.21267700]
[38.51550674 285.25619507]
[33.24488449 299.29971313]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 69]
[10 68]
[11 67]
[13 65]
[14 64]
[16 62]
[17 61]
[18 60]
[19 59]
[20 58]
[21 57]
[22 56]
[23 55]
[25 54]
[26 53]
[27 45]
[28 44]
[30 41]
[31 40]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
