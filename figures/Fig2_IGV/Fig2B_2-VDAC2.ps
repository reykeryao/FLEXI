%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Oct 11 12:20:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAACAUUUUGAAAAUUUUAGUAUUAAUUUUAUUAAUUUAUUUUUGUAUUUCAAAAAAAGAAAACAAAUUACUUUUCUUUCAAAAUAG\
) } def
/len { sequence length } bind def

/coor [
[103.86957550 288.79583740]
[88.43942261 287.15570068]
[76.94279480 276.73422241]
[73.80038452 261.53866577]
[80.22050476 247.41204834]
[93.73449707 239.78633118]
[95.31997681 224.87034607]
[96.90545654 209.95437622]
[98.49092865 195.03840637]
[100.07640839 180.12243652]
[101.66188812 165.20645142]
[103.24736786 150.29048157]
[104.83284760 135.37451172]
[92.31544495 133.84426880]
[81.46165466 128.15280151]
[73.55761719 119.25629425]
[69.43861389 108.47049713]
[69.40455627 97.27986908]
[55.24007416 92.34353638]
[41.07558823 87.40720367]
[26.91110611 82.47086334]
[12.74662113 77.53453064]
[-1.41786313 72.59819794]
[-14.75829697 80.75704956]
[-30.21430016 78.38092041]
[-40.48801804 66.59174347]
[-40.72851944 50.95600891]
[-30.82224274 38.85643387]
[-15.44663239 36.00606537]
[-1.86157870 43.75076294]
[3.51847005 58.43371582]
[17.68295479 63.37004852]
[31.84743881 68.30638123]
[46.01192474 73.24271393]
[60.17640686 78.17904663]
[74.34088898 83.11537933]
[78.46733093 78.09510803]
[83.55757904 74.05531311]
[89.38379669 71.17680359]
[95.68521118 69.58844757]
[102.17974854 69.36132050]
[106.86532593 55.11191940]
[111.55091095 40.86252213]
[116.23649597 26.61312675]
[120.92208099 12.36372948]
[125.60765839 -1.88566768]
[119.68732452 -16.79637527]
[127.77846527 -30.64964294]
[143.67425537 -32.81842804]
[155.18078613 -21.63902473]
[153.47125244 -5.68731546]
[139.85705566 2.79991484]
[135.17147827 17.04931259]
[130.48588562 31.29870987]
[125.80030823 45.54810715]
[121.11472321 59.79750443]
[116.42914581 74.04689789]
[131.51736450 89.53411865]
[133.34831238 112.75157166]
[148.23397827 114.60005188]
[163.11964417 116.44852448]
[178.00531006 118.29699707]
[192.89099121 120.14547729]
[207.77665710 121.99394989]
[218.27607727 110.56846619]
[233.49266052 107.52947235]
[247.57530212 114.04552460]
[255.10893250 127.61106873]
[253.19674683 143.00987244]
[242.57398987 154.32078552]
[227.32533264 157.19451904]
[213.31420898 150.52609253]
[205.92817688 136.87962341]
[191.04251099 135.03114319]
[176.15684509 133.18266296]
[161.27117920 131.33419800]
[146.38549805 129.48571777]
[131.49983215 127.63723755]
[119.74881744 136.95999146]
[118.16333771 151.87596130]
[116.57786560 166.79193115]
[114.99238586 181.70791626]
[113.40690613 196.62388611]
[111.82142639 211.53985596]
[110.23594666 226.45582581]
[108.65046692 241.37179565]
[120.25946808 251.66795349]
[123.56654358 266.82852173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 86]
[7 85]
[8 84]
[9 83]
[10 82]
[11 81]
[12 80]
[13 79]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[41 57]
[42 56]
[43 55]
[44 54]
[45 53]
[46 52]
[59 78]
[60 77]
[61 76]
[62 75]
[63 74]
[64 73]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
