%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Oct 11 12:22:54 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAGUUUAAAAUAACCCAAAUUGCUCCUUGGAUUUUUCCUUCAGUUUAUUAAACUCUGUUGCUUCCUUUCAG\
) } def
/len { sequence length } bind def

/coor [
[137.69851685 236.59388733]
[140.06704712 221.68441772]
[146.37132263 207.96731567]
[156.14352417 196.46051025]
[147.74391174 184.03286743]
[139.34428406 171.60522461]
[130.94465637 159.17758179]
[122.54504395 146.74993896]
[114.14541626 134.32228088]
[105.74579620 121.89464569]
[98.85971832 122.60728455]
[92.08029175 121.20537567]
[86.04163361 117.82003021]
[81.30855560 112.76791382]
[78.32376862 106.52155304]
[77.36645508 99.66520691]
[78.52614594 92.84017181]
[81.69437408 86.68482971]
[86.57480621 81.77490997]
[82.18246460 67.43241119]
[77.79012299 53.08990860]
[73.39778137 38.74740982]
[69.00543976 24.40490723]
[64.61309814 10.06240654]
[54.43077850 8.04351902]
[45.83270645 2.33370090]
[40.08832169 -6.16989660]
[38.02504349 -16.16185570]
[39.90930939 -26.12881088]
[45.41313934 -34.57865524]
[53.67015076 -40.26390457]
[51.76488495 -55.14241028]
[49.85961533 -70.02091980]
[39.49751663 -82.73149872]
[45.57628250 -97.96240997]
[61.84260559 -100.04539490]
[71.56307983 -86.83765411]
[64.73812103 -71.92618561]
[66.64339447 -57.04767609]
[68.54866028 -42.16917038]
[85.72306061 -31.62592506]
[90.22713470 -11.69934464]
[78.95560455 5.67006540]
[83.34794617 20.01256561]
[87.74028778 34.35506821]
[92.13262939 48.69756699]
[96.52497101 63.04006958]
[100.91731262 77.38256836]
[120.42404175 90.24048615]
[118.17343903 113.49501801]
[126.57306671 125.92266846]
[134.97268677 138.35031128]
[143.37231445 150.77795410]
[151.77192688 163.20559692]
[160.17155457 175.63323975]
[168.57116699 188.06088257]
[182.89184570 183.28375244]
[197.97036743 182.54859924]
[212.68783569 185.90995789]
[225.95210266 193.11840820]
[236.77888489 203.63903809]
[244.36473083 216.69113159]
[248.14675903 231.30616760]
[247.84429932 246.39956665]
[243.47979736 260.85134888]
[235.37712097 273.58905029]
[224.13755798 283.66748047]
[210.59513855 290.33874512]
[195.75482178 293.10778809]
[180.71784973 291.76913452]
[166.60006714 286.42211914]
[154.44909668 277.46350098]
[145.16664124 265.55810547]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 56]
[5 55]
[6 54]
[7 53]
[8 52]
[9 51]
[10 50]
[19 48]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[31 40]
[32 39]
[33 38]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
