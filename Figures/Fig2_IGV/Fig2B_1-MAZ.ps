%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri Oct 11 12:22:48 2019
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAGUAGGGCCGGCCGCGGCGGCCCGGGCUGGGGGGGGACGCCCGCCCGCACCCGCGGCCCACUCGGCGCCUUGUCUCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[119.12459564 354.23052979]
[118.01680756 339.27148438]
[116.90901947 324.31246948]
[115.52499390 309.37643433]
[113.86520386 294.46856689]
[111.93021393 279.59387207]
[109.72068787 264.75750732]
[107.51116180 249.92114258]
[105.30164337 235.08476257]
[103.09211731 220.24838257]
[100.88259125 205.41201782]
[97.44855499 201.77986145]
[96.42240143 195.87722778]
[99.10013580 189.40238953]
[97.99234772 174.44335938]
[96.88455963 159.48431396]
[95.77677155 144.52528381]
[87.12065887 132.40417480]
[93.81764984 118.07027435]
[82.91214752 108.53003693]
[81.84205627 94.08008575]
[91.22331238 83.03751373]
[90.11552429 68.07847595]
[89.00773621 53.11943817]
[87.89994812 38.16040039]
[86.51592255 23.22438812]
[84.85613251 8.31650066]
[83.19634247 -6.59138680]
[81.53655243 -21.49927330]
[77.38990021 -29.91534996]
[80.10137177 -36.98728943]
[78.99358368 -51.94632721]
[70.25823975 -65.13739014]
[77.03446960 -78.40132904]
[75.92668152 -93.36036682]
[74.81889343 -108.31940460]
[66.08354187 -121.51046753]
[72.85977173 -134.77439880]
[71.75198364 -149.73344421]
[62.08363342 -162.97938538]
[68.96730804 -177.86384583]
[85.32167053 -179.07496643]
[94.32276154 -165.36685181]
[86.71102142 -150.84123230]
[87.81880951 -135.88218689]
[96.47492218 -123.76110077]
[89.77793121 -109.42719269]
[90.88571930 -94.46815491]
[91.99350739 -79.50911713]
[100.64962006 -67.38802338]
[93.95262146 -53.05411530]
[95.06040955 -38.09507751]
[96.44443512 -23.15906334]
[98.10422516 -8.25117683]
[99.76401520 6.65671015]
[101.42380524 21.56459808]
[105.38858032 28.01789093]
[102.85898590 37.05261230]
[103.96677399 52.01165009]
[105.07456207 66.97068787]
[106.18235016 81.92972565]
[117.08785248 91.46996307]
[118.15794373 105.91991425]
[108.77668762 116.96248627]
[117.51203918 130.15354919]
[110.73580933 143.41749573]
[111.84359741 158.37652588]
[112.95138550 173.33557129]
[114.05917358 188.29460144]
[115.71896362 203.20248413]
[117.92848969 218.03886414]
[120.13801575 232.87524414]
[122.34754181 247.71160889]
[124.55706787 262.54797363]
[126.76659393 277.38436890]
[131.22138977 285.64144897]
[128.77308655 292.80877686]
[130.43287659 307.71664429]
[134.57952881 316.13272095]
[131.86805725 323.20468140]
[132.97584534 338.16369629]
[134.08363342 353.12274170]
[141.28321838 368.47207642]
[128.52677917 379.63943481]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 82]
[2 81]
[3 80]
[4 78]
[5 77]
[6 75]
[7 74]
[8 73]
[9 72]
[10 71]
[11 70]
[14 69]
[15 68]
[16 67]
[17 66]
[19 64]
[22 61]
[23 60]
[24 59]
[25 58]
[26 56]
[27 55]
[28 54]
[29 53]
[31 52]
[32 51]
[34 49]
[35 48]
[36 47]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
